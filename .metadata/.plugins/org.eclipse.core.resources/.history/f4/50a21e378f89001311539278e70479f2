//***************************************************************
// Copyright (C) 2013 Baraan Soft
//***************************************************************
//      Project Name : ImageCachingSample
//      Created At   : 28-Jan-2014
//      Author       : prasad
//      Class Name   : BitmapUtils.java
//
//***************************************************************
// Class Description :
//
//***************************************************************
package com.example.imagecachingsample;

import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.WeakReference;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.HttpGet;

import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.net.http.AndroidHttpClient;
import android.util.Log;
import android.widget.ImageView;

/**
 * @author prasad
 * 
 */
public class BitmapUtils {
	private static final String TAG = "BitmapUtils";
	public static Bitmap decodeSampleBitmapFromResource(Resources res,int resId,
			int reqWidth, int reqHeight) {
		BitmapFactory.Options options = new BitmapFactory.Options();
		options.inJustDecodeBounds = true;
		BitmapFactory.decodeResource(res, resId, options);

		options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);
		
		options.inJustDecodeBounds = false;
		return BitmapFactory.decodeResource(res, resId, options);
	}
	
	public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {
		final int outWidth = options.outWidth;
		final int outHeight = options.outHeight;
		int inSampleSize = 1;
		
		if(outWidth > reqWidth || outHeight > reqHeight) {
			final int halfWidth = outWidth / 2;
			final int halfHeight = outHeight / 2;
			while( (halfWidth / inSampleSize) > reqWidth && (halfHeight / inSampleSize) > reqHeight) {
				inSampleSize *= 2; 
			}
		}
		
		return inSampleSize;
	}
	
	public static Bitmap downloadBitmap(String url) {
		final AndroidHttpClient client = AndroidHttpClient.newInstance("Android");
		final HttpGet getReq = new HttpGet(url);
		
		try {
			HttpResponse response = client.execute(getReq);
			int statusCode = response.getStatusLine().getStatusCode();
			if (statusCode != HttpStatus.SC_OK) {
				Log.e(TAG, "Error "+ statusCode + " while downloading bitmap from "+ url);
				return null;
			}
			
			final HttpEntity entity = response.getEntity();
			if(entity != null) {
				InputStream is = null; 
				try {
					is = entity.getContent();
					final Bitmap bmp = BitmapFactory.decodeStream(is);
					return bmp;
				} finally {
					if(is != null) {
						is.close();
					}
					entity.consumeContent();
				}
			}
		} catch (IOException e) {
			getReq.abort();
			Log.e(TAG, "Error retrieving the bitmap from "+url + "-"+e.toString());
		} finally {
			if(client != null) {
				client.close();
			}
		}
		return null;
	}
	
	static class DownloadedDrawable extends ColorDrawable {
		private final WeakReference<BitmapDownloaderTask> bitmapDownloaderTaskReference;

		public DownloadedDrawable(BitmapDownloaderTask bitmapDownloaderTask) {
			super(Color.BLACK);
			bitmapDownloaderTaskReference = new WeakReference<BitmapDownloaderTask>(bitmapDownloaderTask);
		}
		
		public BitmapDownloaderTask getBitmapDownloaderTask() {
			return bitmapDownloaderTaskReference.get();
		}
	}
}
